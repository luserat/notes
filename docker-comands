Containers are not mini-MV's: 
	They are just processes
	Limited to what resources they can access
	Exit when process stops
Alpine linux - a small security-focused distribution

General info:
	docker version
	docker info -- get installations info

Container management:
	docker container --help or go docs.docker.com
	docker container run --publish 80:80 --detach --name web nginx -- detach told docker to run it in background
		- looks for that image localy in image cache, doesn't find anything
		- then looks in remote image repository (defaults to Docker Hub)
		- downloads the latest version (nginx:latest by default)
		- creates new container based on that image and prepares to start
		- gives it a virtual IP on a private network inside docker engine
		- opens port 80 on host and forwards to port 80 in container (publishing ports is always in HOST:CONTAINER format)
		- starts container by using the CMD in the image Dockerfile (you can change CMD run on start) 
	docker container run -p 80:80 -d --name web nginx -- the same as previous
	docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
	docker container stop <name>
	docker stop -t 0 <name> - adding the option to wait zero seconds before terminating the container
	docker container start <name>
	docker container ls -a -- show all running/stoped containers
	docker container rm -f <name> -- use force to delete running containers
	docker container rm $(docker container ls -a -q) -- delete all containers
	docker contaimer inspect <name> -- inspect a container
	docker container top <name> - show processes inside container
	docker container stats -- performance stats for all containers
	docker container inspect <name> -- see how container configured
	docker container run -it -- start new container interactively
		- no ssh needed, docker cli is great substitude for adding ssh to containers
		-t allocate a pseudo-TTY
		-i keep STDIN open even if not attached 
	docker container run -it nginx bash 
		- we changed the dafault nginx command (from image) to bash, the container will stop if we exit from the shell
	docker container run -it --name ubuntu ubuntu - it's default CMD is bash, so we don't have to specify it
	docker container start -ai ubuntu - start existing container
	docker run ubuntu:14.04 /bin/cat /etc/issue.net
	docker container run --rm -it ubuntu bash -- delete container after
	docker container exec -it mysql bash -- run additional command in existing container
	docker logs -f <name>

Docker Networks Basics:
	each container connected to a private virtual network "bridge"
	each virtual network routes through NAT firewall on host IP
	all containers on a virtual network can talk to each other without -p
	best practice is to create a new virtual network for each app:
	
	docker network ls -- show networks
	docker network inspect -- inspect a network
	docker network create --driver -- create a network
		- bridge -- default docker virtual network, which is NAT'ed behind the Host IP
		- host -- It gains performance by skipping virtual networks but sacrifices security of container model
		attaching container directly to Host interface
		- none -- removes eth0 and only leaves you with localhost interface in container
	docker network connect -- attach a network to container
	docker network disconnect -- detach a network from container
	docker container run -p 8080:80 -d --network prime --name prime nginx -- create container with specific network
	docker container port <name> - quick port check

Docker Networks DNS:
	Forget IP's. Static IP's and using IP's for talking to containers is an antipatern. Do your best to avoid it.
	Docker daemon has a built-in DNS server that containers use by default.	
	Docker defaults the hostname to the container's name, but you can also set aliases.
	Default bridge network doesn't have built in DNS server.	
	--net-alias -- when creating containers to give them an additional DNS name to respond to
	docker container run -d --network max_net --name max_search2 --net-alias search elasticsearch:2
	docker container run --rm --network max_net alpine nslookup search

Docker images:
	a container is just a single read/write layer on top of image
	each layer is uniquely identified and only stored once on a host
	this saves storage space on host and transfer time on push/pull	

	docker image ls
	docker pull alpine
	docker image history <image-name> -- history of image layers
	docker image inspect <image-name>
	docker image tag nginx lasergun/nginx -- assign one or more tags to an image
		"latest" tag is just the default tag, image owners should assign it to the newest stable version
	docker image push -- upload changed layers to a image registry (default is Hub)
	docker login <server> -- defaults to loggin in Hub, but you can override by adding server url 
	docker logout -- always logout from shared machines or servers when done, to protect your account

Dockerfile:
	ENV -- environment variables, to inject key/value, they work everywhere, on every OS and config
	
	docker image build -t customimage .
	docker image build -f some-dockerfile
