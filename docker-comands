Containers are not mini-MV's: 
	They are just processes
	Limited to what resources they can access
	Exit when process stops

General info:
	docker version
	docker info -- get installations info

Working with containers:
	docker container --help or go docs.docker.com
	docker container run --publish 80:80 --detach --name web nginx -- detach told docker to run it in background
		- looks for that image localy in image cache, doesn't find anything
		- then looks in remote image repository (defaults to Docker Hub)
		- downloads the latest version (nginx:latest by default)
		- creates new container based on that image and prepares to start
		- gives it a virtual IP on a private network inside docker engine
		- opens port 80 on host and forwards to port 80 in container
		- starts container by using the CMD in the image Dockerfile (you can change CMD run on start) 
	docker container run -p 80:80 -d --name web nginx -- the same as previous
	docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
	docker container stop <name>
	docker container start <name>
	docker container ls -a -- show all running/stoped containers
	docker container rm -f <name> -- use force to delete running containers
	docker container top <name> - show processes inside container
	docker container stats -- performance stats for all containers
	docker container inspect <name> -- see how container configured
	docker container run -it -- start new container interactively
		- no ssh needed, docker cli is great substitude for adding ssh to containers
		-t allocate a pseudo-TTY
		-i keep STDIN open even if not attached 
	docker container exec -it -- run additional command in existing container
	docker container run -it nginx bash 
		- we changed the dafault nginx command (from image) to bash, the container will stop if we exit from the shell

	
